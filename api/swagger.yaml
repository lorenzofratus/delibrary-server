---
swagger: "2.0"
info:
  description: "Delibrary is a place of interaction that encourages the exchange of\
    \ books between users."
  version: "1.0.0"
  title: "Delibrary"
host: "delibrary.herokuapp.com"
basePath: "/v1"
tags:
- name: "User"
  description: "All the operations for managing users."
- name: "Wish"
  description: "All the operations for managing users' wishes"
- name: "Property"
  description: "All the operations for managing users' properties"
- name: "Exchange"
  description: "All the operations for managing users' exchanges"
schemes:
- "https"
paths:
  /users:
    get:
      tags:
      - "User"
      summary: "Get all Delibrary users."
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Collection of all Delibrary users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "401":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "User"
  /users/new:
    post:
      tags:
      - "User"
      summary: "Add a new user to Delibrary."
      operationId: "addUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user object."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "201":
          description: "User successfully created."
          schema:
            $ref: "#/definitions/User"
        "401":
          $ref: "#/responses/Unauthorized"
        "400":
          $ref: "#/responses/BadRequest"
        "409":
          $ref: "#/responses/Conflict"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "User"
  /users/{username}:
    get:
      tags:
      - "User"
      summary: "Get the user with the given username."
      operationId: "getUserByUsername"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user to get."
        required: true
        type: "string"
      responses:
        "200":
          description: "User object with the given username."
          schema:
            $ref: "#/definitions/User"
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      summary: "Update the user with the given username."
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user to update."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated version of the user object."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "201":
          description: "User successfully updated."
          schema:
            $ref: "#/definitions/User"
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      summary: "Delete the user with the given ID."
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to delete."
        required: true
        type: "string"
      responses:
        "200":
          description: "User successfully deleted."
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "User"
  /users/{username}/wishes:
    get:
      tags:
      - "Wish"
      summary: "Get all the books the user wish to own."
      operationId: "getUserWishes"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user whose wishes are to be obtained."
        required: true
        type: "string"
      responses:
        "200":
          description: "Collection of wishes of the user."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Wish"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Wish"
  /users/{username}/wishes/new:
    post:
      tags:
      - "Wish"
      summary: "Add a wish for the user with the given username."
      operationId: "postUserWish"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "book"
        description: "The newly-wished book."
        required: true
        schema:
          $ref: "#/definitions/Book"
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      responses:
        "201":
          description: "Wish successfully added."
          schema:
            $ref: "#/definitions/Wish"
        "401":
          $ref: "#/responses/Unauthorized"
        "400":
          $ref: "#/responses/BadRequest"
        "409":
          $ref: "#/responses/Conflict"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Wish"
  /users/{username}/wishes/{id}:
    get:
      tags:
      - "Wish"
      summary: "Get the wish of the user with the given ID."
      operationId: "getUserWish"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the wish."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The required wish."
          schema:
            $ref: "#/definitions/Wish"
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Wish"
    delete:
      tags:
      - "Wish"
      summary: "Delete the wish of the user with the given ID."
      operationId: "deleteUserWish"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the wish."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Wish successfully deleted."
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Wish"
  /users/{username}/properties:
    get:
      tags:
      - "Property"
      summary: "Get all the books the user owns."
      operationId: "getUserProperties"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user whose properties are to be obtained."
        required: true
        type: "string"
      responses:
        "200":
          description: "Collection of properties of the user."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Property"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Property"
  /users/{username}/properties/new:
    post:
      tags:
      - "Property"
      summary: "Add a property for the user with the given username."
      operationId: "postUserProperty"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "book"
        description: "the new property, without ID."
        required: true
        schema:
          type: object
          properties:
            book:
              $ref: "#/definitions/Book"
            position:
              $ref: "#/definitions/Position"
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      responses:
        "201":
          description: "Property successfully added."
          schema:
            $ref: "#/definitions/Property"
        "401":
          $ref: "#/responses/Unauthorized"
        "400":
          $ref: "#/responses/BadRequest"
        "409":
          $ref: "#/responses/Conflict"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Property"
  /users/{username}/properties/{id}:
    get:
      tags:
      - "Property"
      summary: "Get the property of the user with the given ID."
      operationId: "getUserProperty"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the property."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The required property."
          schema:
            $ref: "#/definitions/Property"
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Property"
    delete:
      tags:
      - "Property"
      summary: "Delete the property of the user with the given ID."
      operationId: "deleteUserProperty"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the property."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Property successfully deleted."
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Property"
  /users/{username}/exchanges:
    get:
      tags:
      - "Exchange"
      summary: "Get all the exchanges where the buyer is involved."
      operationId: "getUserExchanges"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the buyer whose exchanges have to be obtained."
        required: true
        type: "string"
      responses:
        "200":
          description: "Collection of exchanges of the buyer."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exchange"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Exchange"
  /users/{username}/exchanges/new:
    post:
      tags:
      - "Exchange"
      summary: "Add a exchange for the buyer with the given username."
      operationId: "postUserExchange"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Info needed for the new exchange object."
        required: true
        schema:
          type: object
          properties:
            sellerUsername:
              type: string
            bookId:
              type: integer
      - name: "username"
        in: "path"
        description: "Username of the buyer."
        required: true
        type: "string"
      responses:
        "201":
          description: "Exchange successfully added."
          schema:
            $ref: "#/definitions/Exchange"
        "401":
          $ref: "#/responses/Unauthorized"
        "400":
          $ref: "#/responses/BadRequest"
        "409":
          $ref: "#/responses/Conflict"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Exchange"
  /users/{username}/exchanges/{id}:
    get:
      tags:
      - "Exchange"
      summary: "Get the exchange of the buyer with the given ID."
      operationId: "getUserExchange"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the buyer."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the exchange."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The required exchange."
          schema:
            $ref: "#/definitions/Exchange"
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Exchange"
    delete:
      tags:
      - "Exchange"
      summary: "Delete the exchange of the buyer with the given ID."
      operationId: "deleteUserExchange"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the buyer."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the exchange."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Exchange successfully deleted."
        "401":
          $ref: "#/responses/Unauthorized"
        "404":
          $ref: "#/responses/NotFound"
        "500":
          $ref: "#/responses/ServerError"
      x-swagger-router-controller: "Exchange"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
        example: "nicheosala"
      name:
        type: "string"
        example: "Nicolò"
      surname:
        type: "string"
        example: "Sala"
      email:
        type: "string"
        example: "example@domain.org"
    title: "User"
    description: "A user of Delibrary"
    example:
      surname: "Sala"
      name: "Nicolò"
      email: "example@domain.org"
      username: "nicheosala"
  Wish:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        type: "string"
      bookId:
        type: "string"
        example: "9780491212489"
    title: "Wish"
    example:
      bookId: "9780491212489"
      id: 0
      username: "nicheosala"
  Property:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      owner:
        type: "string"
      bookId:
        type: "string"
        example: "9780491212489"
      position:
        $ref: "#/definitions/Position"
    title: "Property"
    example:
      owner: "nicheosala"
      bookId: "9780491212489"
      id: 0
      position:
        province: "Lecco"
        city: "Brivio"
        region: "Lombardia"
  Book:
    type: "object"
    properties:
      bookId:
        type: "string"
        example: "9780491212489"
    title: "Book"
  Position:
    type: "object"
    properties:
      region:
        type: "string"
        example: "Lombardia"
      province:
        type: "string"
        example: "Lecco"
      city:
        type: "string"
        example: "Brivio"
    title: "Position"
    example:
      province: "Lecco"
      city: "Brivio"
      region: "Lombardia"
  Exchange:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      buyer:
        type: "string"
      seller:
        type: "string"
      book:
        type: "integer"
        format: "int64"
      payment:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
        - "proposed"
        - "refused"
        - "agreed"
        - "happened"
    title: "Exchange"
    example:
      seller: "seller"
      book: 6
      payment: 1
      id: 0
      buyer: "buyer"
      status: "proposed"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
      title:
        type: "string"
      description:
        type: "string"
    required:
    - code
    - title
    - description
responses:
  NotFound:
    description: "The server can not find the requested resource."
    schema:
      $ref: "#/definitions/Error"
  BadRequest:
    description: "The server could not understand the request due to invalid syntax."
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "The client must authenticate itself to get the requested response."
    schema:
      $ref: "#/definitions/Error"
  ServerError:
    description: "The server has encountered a situation it doesn't know how to handle."
    schema:
      $ref: "#/definitions/Error"
  Conflict:
    description: "This response is sent when a request conflicts with the current state of the server."
    schema:
      $ref: "#/definitions/Error"
    